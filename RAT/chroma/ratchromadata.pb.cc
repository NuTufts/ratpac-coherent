// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ratchromadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ratchromadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ratchroma {

namespace {

const ::google::protobuf::Descriptor* CherenkovPhoton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CherenkovPhoton_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScintStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScintStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChromaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChromaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ratchromadata_2eproto() {
  protobuf_AddDesc_ratchromadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ratchromadata.proto");
  GOOGLE_CHECK(file != NULL);
  CherenkovPhoton_descriptor_ = file->message_type(0);
  static const int CherenkovPhoton_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, dz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, wavelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, pz_),
  };
  CherenkovPhoton_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CherenkovPhoton_descriptor_,
      CherenkovPhoton::default_instance_,
      CherenkovPhoton_offsets_,
      -1,
      -1,
      -1,
      sizeof(CherenkovPhoton),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovPhoton, _is_default_instance_));
  ScintStep_descriptor_ = file->message_type(1);
  static const int ScintStep_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, nphotons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, material_),
  };
  ScintStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScintStep_descriptor_,
      ScintStep::default_instance_,
      ScintStep_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScintStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, _is_default_instance_));
  ChromaData_descriptor_ = file->message_type(2);
  static const int ChromaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, cherenkovdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, stepdata_),
  };
  ChromaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChromaData_descriptor_,
      ChromaData::default_instance_,
      ChromaData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChromaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ratchromadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CherenkovPhoton_descriptor_, &CherenkovPhoton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScintStep_descriptor_, &ScintStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChromaData_descriptor_, &ChromaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ratchromadata_2eproto() {
  delete CherenkovPhoton::default_instance_;
  delete CherenkovPhoton_reflection_;
  delete ScintStep::default_instance_;
  delete ScintStep_reflection_;
  delete ChromaData::default_instance_;
  delete ChromaData_reflection_;
}

void protobuf_AddDesc_ratchromadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ratchromadata.proto\022\tratchroma\"\231\001\n\017Che"
    "renkovPhoton\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030"
    "\004 \001(\002\022\t\n\001t\030\005 \001(\002\022\n\n\002dx\030\006 \001(\002\022\n\n\002dy\030\007 \001(\002"
    "\022\n\n\002dz\030\010 \001(\002\022\022\n\nwavelength\030\t \001(\002\022\n\n\002px\030\n"
    " \001(\002\022\n\n\002py\030\013 \001(\002\022\n\n\002pz\030\014 \001(\002\"\327\001\n\tScintSt"
    "ep\022\020\n\010nphotons\030\001 \001(\005\022\024\n\014step_start_x\030\002 \001"
    "(\002\022\024\n\014step_start_y\030\003 \001(\002\022\024\n\014step_start_z"
    "\030\004 \001(\002\022\024\n\014step_start_t\030\005 \001(\002\022\022\n\nstep_end"
    "_x\030\006 \001(\002\022\022\n\nstep_end_y\030\007 \001(\002\022\022\n\nstep_end"
    "_z\030\010 \001(\002\022\022\n\nstep_end_t\030\t \001(\002\022\020\n\010material"
    "\030\n \001(\t\"x\n\nChromaData\022\017\n\007eventid\030\001 \001(\005\0221\n"
    "\rcherenkovdata\030\002 \003(\0132\032.ratchroma.Cherenk"
    "ovPhoton\022&\n\010stepdata\030\003 \003(\0132\024.ratchroma.S"
    "cintStepB\002H\001b\006proto3", 540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ratchromadata.proto", &protobuf_RegisterTypes);
  CherenkovPhoton::default_instance_ = new CherenkovPhoton();
  ScintStep::default_instance_ = new ScintStep();
  ChromaData::default_instance_ = new ChromaData();
  CherenkovPhoton::default_instance_->InitAsDefaultInstance();
  ScintStep::default_instance_->InitAsDefaultInstance();
  ChromaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ratchromadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ratchromadata_2eproto {
  StaticDescriptorInitializer_ratchromadata_2eproto() {
    protobuf_AddDesc_ratchromadata_2eproto();
  }
} static_descriptor_initializer_ratchromadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CherenkovPhoton::kXFieldNumber;
const int CherenkovPhoton::kYFieldNumber;
const int CherenkovPhoton::kZFieldNumber;
const int CherenkovPhoton::kTFieldNumber;
const int CherenkovPhoton::kDxFieldNumber;
const int CherenkovPhoton::kDyFieldNumber;
const int CherenkovPhoton::kDzFieldNumber;
const int CherenkovPhoton::kWavelengthFieldNumber;
const int CherenkovPhoton::kPxFieldNumber;
const int CherenkovPhoton::kPyFieldNumber;
const int CherenkovPhoton::kPzFieldNumber;
#endif  // !_MSC_VER

CherenkovPhoton::CherenkovPhoton()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.CherenkovPhoton)
}

void CherenkovPhoton::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CherenkovPhoton::CherenkovPhoton(const CherenkovPhoton& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.CherenkovPhoton)
}

void CherenkovPhoton::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  t_ = 0;
  dx_ = 0;
  dy_ = 0;
  dz_ = 0;
  wavelength_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
}

CherenkovPhoton::~CherenkovPhoton() {
  // @@protoc_insertion_point(destructor:ratchroma.CherenkovPhoton)
  SharedDtor();
}

void CherenkovPhoton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CherenkovPhoton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CherenkovPhoton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CherenkovPhoton_descriptor_;
}

const CherenkovPhoton& CherenkovPhoton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

CherenkovPhoton* CherenkovPhoton::default_instance_ = NULL;

CherenkovPhoton* CherenkovPhoton::New(::google::protobuf::Arena* arena) const {
  CherenkovPhoton* n = new CherenkovPhoton;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CherenkovPhoton::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CherenkovPhoton*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, wavelength_);
  ZR_(px_, pz_);

#undef ZR_HELPER_
#undef ZR_

}

bool CherenkovPhoton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.CherenkovPhoton)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 2;
      case 2: {
        if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // optional float z = 4;
      case 4: {
        if (tag == 37) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_t;
        break;
      }

      // optional float t = 5;
      case 5: {
        if (tag == 45) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_dx;
        break;
      }

      // optional float dx = 6;
      case 6: {
        if (tag == 53) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_dy;
        break;
      }

      // optional float dy = 7;
      case 7: {
        if (tag == 61) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_dz;
        break;
      }

      // optional float dz = 8;
      case 8: {
        if (tag == 69) {
         parse_dz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_wavelength;
        break;
      }

      // optional float wavelength = 9;
      case 9: {
        if (tag == 77) {
         parse_wavelength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wavelength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_px;
        break;
      }

      // optional float px = 10;
      case 10: {
        if (tag == 85) {
         parse_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &px_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_py;
        break;
      }

      // optional float py = 11;
      case 11: {
        if (tag == 93) {
         parse_py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &py_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_pz;
        break;
      }

      // optional float pz = 12;
      case 12: {
        if (tag == 101) {
         parse_pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.CherenkovPhoton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.CherenkovPhoton)
  return false;
#undef DO_
}

void CherenkovPhoton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.CherenkovPhoton)
  // optional float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float t = 5;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->t(), output);
  }

  // optional float dx = 6;
  if (this->dx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dx(), output);
  }

  // optional float dy = 7;
  if (this->dy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dy(), output);
  }

  // optional float dz = 8;
  if (this->dz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dz(), output);
  }

  // optional float wavelength = 9;
  if (this->wavelength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wavelength(), output);
  }

  // optional float px = 10;
  if (this->px() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->px(), output);
  }

  // optional float py = 11;
  if (this->py() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->py(), output);
  }

  // optional float pz = 12;
  if (this->pz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pz(), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.CherenkovPhoton)
}

::google::protobuf::uint8* CherenkovPhoton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.CherenkovPhoton)
  // optional float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional float t = 5;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->t(), target);
  }

  // optional float dx = 6;
  if (this->dx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dx(), target);
  }

  // optional float dy = 7;
  if (this->dy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dy(), target);
  }

  // optional float dz = 8;
  if (this->dz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dz(), target);
  }

  // optional float wavelength = 9;
  if (this->wavelength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wavelength(), target);
  }

  // optional float px = 10;
  if (this->px() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->px(), target);
  }

  // optional float py = 11;
  if (this->py() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->py(), target);
  }

  // optional float pz = 12;
  if (this->pz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.CherenkovPhoton)
  return target;
}

int CherenkovPhoton::ByteSize() const {
  int total_size = 0;

  // optional float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float t = 5;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // optional float dx = 6;
  if (this->dx() != 0) {
    total_size += 1 + 4;
  }

  // optional float dy = 7;
  if (this->dy() != 0) {
    total_size += 1 + 4;
  }

  // optional float dz = 8;
  if (this->dz() != 0) {
    total_size += 1 + 4;
  }

  // optional float wavelength = 9;
  if (this->wavelength() != 0) {
    total_size += 1 + 4;
  }

  // optional float px = 10;
  if (this->px() != 0) {
    total_size += 1 + 4;
  }

  // optional float py = 11;
  if (this->py() != 0) {
    total_size += 1 + 4;
  }

  // optional float pz = 12;
  if (this->pz() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CherenkovPhoton::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CherenkovPhoton* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CherenkovPhoton>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CherenkovPhoton::MergeFrom(const CherenkovPhoton& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.dx() != 0) {
    set_dx(from.dx());
  }
  if (from.dy() != 0) {
    set_dy(from.dy());
  }
  if (from.dz() != 0) {
    set_dz(from.dz());
  }
  if (from.wavelength() != 0) {
    set_wavelength(from.wavelength());
  }
  if (from.px() != 0) {
    set_px(from.px());
  }
  if (from.py() != 0) {
    set_py(from.py());
  }
  if (from.pz() != 0) {
    set_pz(from.pz());
  }
}

void CherenkovPhoton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CherenkovPhoton::CopyFrom(const CherenkovPhoton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CherenkovPhoton::IsInitialized() const {

  return true;
}

void CherenkovPhoton::Swap(CherenkovPhoton* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CherenkovPhoton::InternalSwap(CherenkovPhoton* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(t_, other->t_);
  std::swap(dx_, other->dx_);
  std::swap(dy_, other->dy_);
  std::swap(dz_, other->dz_);
  std::swap(wavelength_, other->wavelength_);
  std::swap(px_, other->px_);
  std::swap(py_, other->py_);
  std::swap(pz_, other->pz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CherenkovPhoton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CherenkovPhoton_descriptor_;
  metadata.reflection = CherenkovPhoton_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CherenkovPhoton

// optional float x = 2;
void CherenkovPhoton::clear_x() {
  x_ = 0;
}
 float CherenkovPhoton::x() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.x)
  return x_;
}
 void CherenkovPhoton::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.x)
}

// optional float y = 3;
void CherenkovPhoton::clear_y() {
  y_ = 0;
}
 float CherenkovPhoton::y() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.y)
  return y_;
}
 void CherenkovPhoton::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.y)
}

// optional float z = 4;
void CherenkovPhoton::clear_z() {
  z_ = 0;
}
 float CherenkovPhoton::z() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.z)
  return z_;
}
 void CherenkovPhoton::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.z)
}

// optional float t = 5;
void CherenkovPhoton::clear_t() {
  t_ = 0;
}
 float CherenkovPhoton::t() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.t)
  return t_;
}
 void CherenkovPhoton::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.t)
}

// optional float dx = 6;
void CherenkovPhoton::clear_dx() {
  dx_ = 0;
}
 float CherenkovPhoton::dx() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.dx)
  return dx_;
}
 void CherenkovPhoton::set_dx(float value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.dx)
}

// optional float dy = 7;
void CherenkovPhoton::clear_dy() {
  dy_ = 0;
}
 float CherenkovPhoton::dy() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.dy)
  return dy_;
}
 void CherenkovPhoton::set_dy(float value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.dy)
}

// optional float dz = 8;
void CherenkovPhoton::clear_dz() {
  dz_ = 0;
}
 float CherenkovPhoton::dz() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.dz)
  return dz_;
}
 void CherenkovPhoton::set_dz(float value) {
  
  dz_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.dz)
}

// optional float wavelength = 9;
void CherenkovPhoton::clear_wavelength() {
  wavelength_ = 0;
}
 float CherenkovPhoton::wavelength() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.wavelength)
  return wavelength_;
}
 void CherenkovPhoton::set_wavelength(float value) {
  
  wavelength_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.wavelength)
}

// optional float px = 10;
void CherenkovPhoton::clear_px() {
  px_ = 0;
}
 float CherenkovPhoton::px() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.px)
  return px_;
}
 void CherenkovPhoton::set_px(float value) {
  
  px_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.px)
}

// optional float py = 11;
void CherenkovPhoton::clear_py() {
  py_ = 0;
}
 float CherenkovPhoton::py() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.py)
  return py_;
}
 void CherenkovPhoton::set_py(float value) {
  
  py_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.py)
}

// optional float pz = 12;
void CherenkovPhoton::clear_pz() {
  pz_ = 0;
}
 float CherenkovPhoton::pz() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovPhoton.pz)
  return pz_;
}
 void CherenkovPhoton::set_pz(float value) {
  
  pz_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovPhoton.pz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ScintStep::kNphotonsFieldNumber;
const int ScintStep::kStepStartXFieldNumber;
const int ScintStep::kStepStartYFieldNumber;
const int ScintStep::kStepStartZFieldNumber;
const int ScintStep::kStepStartTFieldNumber;
const int ScintStep::kStepEndXFieldNumber;
const int ScintStep::kStepEndYFieldNumber;
const int ScintStep::kStepEndZFieldNumber;
const int ScintStep::kStepEndTFieldNumber;
const int ScintStep::kMaterialFieldNumber;
#endif  // !_MSC_VER

ScintStep::ScintStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.ScintStep)
}

void ScintStep::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScintStep::ScintStep(const ScintStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.ScintStep)
}

void ScintStep::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nphotons_ = 0;
  step_start_x_ = 0;
  step_start_y_ = 0;
  step_start_z_ = 0;
  step_start_t_ = 0;
  step_end_x_ = 0;
  step_end_y_ = 0;
  step_end_z_ = 0;
  step_end_t_ = 0;
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScintStep::~ScintStep() {
  // @@protoc_insertion_point(destructor:ratchroma.ScintStep)
  SharedDtor();
}

void ScintStep::SharedDtor() {
  material_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScintStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScintStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScintStep_descriptor_;
}

const ScintStep& ScintStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

ScintStep* ScintStep::default_instance_ = NULL;

ScintStep* ScintStep::New(::google::protobuf::Arena* arena) const {
  ScintStep* n = new ScintStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScintStep::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScintStep*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nphotons_, step_end_z_);
  step_end_t_ = 0;
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ScintStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.ScintStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nphotons = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nphotons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_step_start_x;
        break;
      }

      // optional float step_start_x = 2;
      case 2: {
        if (tag == 21) {
         parse_step_start_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_step_start_y;
        break;
      }

      // optional float step_start_y = 3;
      case 3: {
        if (tag == 29) {
         parse_step_start_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_step_start_z;
        break;
      }

      // optional float step_start_z = 4;
      case 4: {
        if (tag == 37) {
         parse_step_start_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_step_start_t;
        break;
      }

      // optional float step_start_t = 5;
      case 5: {
        if (tag == 45) {
         parse_step_start_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_step_end_x;
        break;
      }

      // optional float step_end_x = 6;
      case 6: {
        if (tag == 53) {
         parse_step_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_step_end_y;
        break;
      }

      // optional float step_end_y = 7;
      case 7: {
        if (tag == 61) {
         parse_step_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_step_end_z;
        break;
      }

      // optional float step_end_z = 8;
      case 8: {
        if (tag == 69) {
         parse_step_end_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_step_end_t;
        break;
      }

      // optional float step_end_t = 9;
      case 9: {
        if (tag == 77) {
         parse_step_end_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_material;
        break;
      }

      // optional string material = 10;
      case 10: {
        if (tag == 82) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->material().data(), this->material().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ratchroma.ScintStep.material");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.ScintStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.ScintStep)
  return false;
#undef DO_
}

void ScintStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.ScintStep)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nphotons(), output);
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->step_start_x(), output);
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->step_start_y(), output);
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->step_start_z(), output);
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->step_start_t(), output);
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->step_end_x(), output);
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->step_end_y(), output);
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->step_end_z(), output);
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->step_end_t(), output);
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ratchroma.ScintStep.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->material(), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.ScintStep)
}

::google::protobuf::uint8* ScintStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.ScintStep)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nphotons(), target);
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->step_start_x(), target);
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->step_start_y(), target);
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->step_start_z(), target);
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->step_start_t(), target);
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->step_end_x(), target);
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->step_end_y(), target);
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->step_end_z(), target);
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->step_end_t(), target);
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ratchroma.ScintStep.material");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->material(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.ScintStep)
  return target;
}

int ScintStep::ByteSize() const {
  int total_size = 0;

  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nphotons());
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    total_size += 1 + 4;
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->material());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScintStep::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScintStep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScintStep>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScintStep::MergeFrom(const ScintStep& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nphotons() != 0) {
    set_nphotons(from.nphotons());
  }
  if (from.step_start_x() != 0) {
    set_step_start_x(from.step_start_x());
  }
  if (from.step_start_y() != 0) {
    set_step_start_y(from.step_start_y());
  }
  if (from.step_start_z() != 0) {
    set_step_start_z(from.step_start_z());
  }
  if (from.step_start_t() != 0) {
    set_step_start_t(from.step_start_t());
  }
  if (from.step_end_x() != 0) {
    set_step_end_x(from.step_end_x());
  }
  if (from.step_end_y() != 0) {
    set_step_end_y(from.step_end_y());
  }
  if (from.step_end_z() != 0) {
    set_step_end_z(from.step_end_z());
  }
  if (from.step_end_t() != 0) {
    set_step_end_t(from.step_end_t());
  }
  if (from.material().size() > 0) {

    material_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.material_);
  }
}

void ScintStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScintStep::CopyFrom(const ScintStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScintStep::IsInitialized() const {

  return true;
}

void ScintStep::Swap(ScintStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScintStep::InternalSwap(ScintStep* other) {
  std::swap(nphotons_, other->nphotons_);
  std::swap(step_start_x_, other->step_start_x_);
  std::swap(step_start_y_, other->step_start_y_);
  std::swap(step_start_z_, other->step_start_z_);
  std::swap(step_start_t_, other->step_start_t_);
  std::swap(step_end_x_, other->step_end_x_);
  std::swap(step_end_y_, other->step_end_y_);
  std::swap(step_end_z_, other->step_end_z_);
  std::swap(step_end_t_, other->step_end_t_);
  material_.Swap(&other->material_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScintStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScintStep_descriptor_;
  metadata.reflection = ScintStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScintStep

// optional int32 nphotons = 1;
void ScintStep::clear_nphotons() {
  nphotons_ = 0;
}
 ::google::protobuf::int32 ScintStep::nphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.nphotons)
  return nphotons_;
}
 void ScintStep::set_nphotons(::google::protobuf::int32 value) {
  
  nphotons_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.nphotons)
}

// optional float step_start_x = 2;
void ScintStep::clear_step_start_x() {
  step_start_x_ = 0;
}
 float ScintStep::step_start_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_x)
  return step_start_x_;
}
 void ScintStep::set_step_start_x(float value) {
  
  step_start_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_x)
}

// optional float step_start_y = 3;
void ScintStep::clear_step_start_y() {
  step_start_y_ = 0;
}
 float ScintStep::step_start_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_y)
  return step_start_y_;
}
 void ScintStep::set_step_start_y(float value) {
  
  step_start_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_y)
}

// optional float step_start_z = 4;
void ScintStep::clear_step_start_z() {
  step_start_z_ = 0;
}
 float ScintStep::step_start_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_z)
  return step_start_z_;
}
 void ScintStep::set_step_start_z(float value) {
  
  step_start_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_z)
}

// optional float step_start_t = 5;
void ScintStep::clear_step_start_t() {
  step_start_t_ = 0;
}
 float ScintStep::step_start_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_t)
  return step_start_t_;
}
 void ScintStep::set_step_start_t(float value) {
  
  step_start_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_t)
}

// optional float step_end_x = 6;
void ScintStep::clear_step_end_x() {
  step_end_x_ = 0;
}
 float ScintStep::step_end_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_x)
  return step_end_x_;
}
 void ScintStep::set_step_end_x(float value) {
  
  step_end_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_x)
}

// optional float step_end_y = 7;
void ScintStep::clear_step_end_y() {
  step_end_y_ = 0;
}
 float ScintStep::step_end_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_y)
  return step_end_y_;
}
 void ScintStep::set_step_end_y(float value) {
  
  step_end_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_y)
}

// optional float step_end_z = 8;
void ScintStep::clear_step_end_z() {
  step_end_z_ = 0;
}
 float ScintStep::step_end_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_z)
  return step_end_z_;
}
 void ScintStep::set_step_end_z(float value) {
  
  step_end_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_z)
}

// optional float step_end_t = 9;
void ScintStep::clear_step_end_t() {
  step_end_t_ = 0;
}
 float ScintStep::step_end_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_t)
  return step_end_t_;
}
 void ScintStep::set_step_end_t(float value) {
  
  step_end_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_t)
}

// optional string material = 10;
void ScintStep::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScintStep::material() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.material)
  return material_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScintStep::set_material(const ::std::string& value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.material)
}
 void ScintStep::set_material(const char* value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ratchroma.ScintStep.material)
}
 void ScintStep::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ratchroma.ScintStep.material)
}
 ::std::string* ScintStep::mutable_material() {
  
  // @@protoc_insertion_point(field_mutable:ratchroma.ScintStep.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScintStep::release_material() {
  
  return material_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScintStep::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:ratchroma.ScintStep.material)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ChromaData::kEventidFieldNumber;
const int ChromaData::kCherenkovdataFieldNumber;
const int ChromaData::kStepdataFieldNumber;
#endif  // !_MSC_VER

ChromaData::ChromaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.ChromaData)
}

void ChromaData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChromaData::ChromaData(const ChromaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.ChromaData)
}

void ChromaData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eventid_ = 0;
}

ChromaData::~ChromaData() {
  // @@protoc_insertion_point(destructor:ratchroma.ChromaData)
  SharedDtor();
}

void ChromaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChromaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChromaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChromaData_descriptor_;
}

const ChromaData& ChromaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

ChromaData* ChromaData::default_instance_ = NULL;

ChromaData* ChromaData::New(::google::protobuf::Arena* arena) const {
  ChromaData* n = new ChromaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromaData::Clear() {
  eventid_ = 0;
  cherenkovdata_.Clear();
  stepdata_.Clear();
}

bool ChromaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.ChromaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cherenkovdata;
        break;
      }

      // repeated .ratchroma.CherenkovPhoton cherenkovdata = 2;
      case 2: {
        if (tag == 18) {
         parse_cherenkovdata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cherenkovdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cherenkovdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cherenkovdata;
        if (input->ExpectTag(26)) goto parse_loop_stepdata;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ratchroma.ScintStep stepdata = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stepdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stepdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stepdata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.ChromaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.ChromaData)
  return false;
#undef DO_
}

void ChromaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.ChromaData)
  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // repeated .ratchroma.CherenkovPhoton cherenkovdata = 2;
  for (unsigned int i = 0, n = this->cherenkovdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cherenkovdata(i), output);
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  for (unsigned int i = 0, n = this->stepdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stepdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.ChromaData)
}

::google::protobuf::uint8* ChromaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.ChromaData)
  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // repeated .ratchroma.CherenkovPhoton cherenkovdata = 2;
  for (unsigned int i = 0, n = this->cherenkovdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cherenkovdata(i), target);
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  for (unsigned int i = 0, n = this->stepdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stepdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.ChromaData)
  return target;
}

int ChromaData::ByteSize() const {
  int total_size = 0;

  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  // repeated .ratchroma.CherenkovPhoton cherenkovdata = 2;
  total_size += 1 * this->cherenkovdata_size();
  for (int i = 0; i < this->cherenkovdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cherenkovdata(i));
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  total_size += 1 * this->stepdata_size();
  for (int i = 0; i < this->stepdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stepdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromaData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChromaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChromaData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChromaData::MergeFrom(const ChromaData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cherenkovdata_.MergeFrom(from.cherenkovdata_);
  stepdata_.MergeFrom(from.stepdata_);
  if (from.eventid() != 0) {
    set_eventid(from.eventid());
  }
}

void ChromaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChromaData::CopyFrom(const ChromaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromaData::IsInitialized() const {

  return true;
}

void ChromaData::Swap(ChromaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromaData::InternalSwap(ChromaData* other) {
  std::swap(eventid_, other->eventid_);
  cherenkovdata_.UnsafeArenaSwap(&other->cherenkovdata_);
  stepdata_.UnsafeArenaSwap(&other->stepdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChromaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChromaData_descriptor_;
  metadata.reflection = ChromaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromaData

// optional int32 eventid = 1;
void ChromaData::clear_eventid() {
  eventid_ = 0;
}
 ::google::protobuf::int32 ChromaData::eventid() const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.eventid)
  return eventid_;
}
 void ChromaData::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ChromaData.eventid)
}

// repeated .ratchroma.CherenkovPhoton cherenkovdata = 2;
int ChromaData::cherenkovdata_size() const {
  return cherenkovdata_.size();
}
void ChromaData::clear_cherenkovdata() {
  cherenkovdata_.Clear();
}
 const ::ratchroma::CherenkovPhoton& ChromaData::cherenkovdata(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.cherenkovdata)
  return cherenkovdata_.Get(index);
}
 ::ratchroma::CherenkovPhoton* ChromaData::mutable_cherenkovdata(int index) {
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.cherenkovdata)
  return cherenkovdata_.Mutable(index);
}
 ::ratchroma::CherenkovPhoton* ChromaData::add_cherenkovdata() {
  // @@protoc_insertion_point(field_add:ratchroma.ChromaData.cherenkovdata)
  return cherenkovdata_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::ratchroma::CherenkovPhoton >&
ChromaData::cherenkovdata() const {
  // @@protoc_insertion_point(field_list:ratchroma.ChromaData.cherenkovdata)
  return cherenkovdata_;
}
 ::google::protobuf::RepeatedPtrField< ::ratchroma::CherenkovPhoton >*
ChromaData::mutable_cherenkovdata() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.ChromaData.cherenkovdata)
  return &cherenkovdata_;
}

// repeated .ratchroma.ScintStep stepdata = 3;
int ChromaData::stepdata_size() const {
  return stepdata_.size();
}
void ChromaData::clear_stepdata() {
  stepdata_.Clear();
}
 const ::ratchroma::ScintStep& ChromaData::stepdata(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.stepdata)
  return stepdata_.Get(index);
}
 ::ratchroma::ScintStep* ChromaData::mutable_stepdata(int index) {
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.stepdata)
  return stepdata_.Mutable(index);
}
 ::ratchroma::ScintStep* ChromaData::add_stepdata() {
  // @@protoc_insertion_point(field_add:ratchroma.ChromaData.stepdata)
  return stepdata_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >&
ChromaData::stepdata() const {
  // @@protoc_insertion_point(field_list:ratchroma.ChromaData.stepdata)
  return stepdata_;
}
 ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >*
ChromaData::mutable_stepdata() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.ChromaData.stepdata)
  return &stepdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ratchroma

// @@protoc_insertion_point(global_scope)
