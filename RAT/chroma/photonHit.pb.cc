// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: photonHit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "photonHit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hitPhotons {

namespace {

const ::google::protobuf::Descriptor* Photon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Photon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Photon_OriginFlag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PhotonHits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotonHits_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_photonHit_2eproto() {
  protobuf_AddDesc_photonHit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "photonHit.proto");
  GOOGLE_CHECK(file != NULL);
  Photon_descriptor_ = file->message_type(0);
  static const int Photon_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, pmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, kineticenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, momx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, momy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, momz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, polx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, poly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, polz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, origin_),
  };
  Photon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Photon_descriptor_,
      Photon::default_instance_,
      Photon_offsets_,
      -1,
      -1,
      -1,
      sizeof(Photon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photon, _is_default_instance_));
  Photon_OriginFlag_descriptor_ = Photon_descriptor_->enum_type(0);
  PhotonHits_descriptor_ = file->message_type(1);
  static const int PhotonHits_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonHits, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonHits, photon_),
  };
  PhotonHits_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotonHits_descriptor_,
      PhotonHits::default_instance_,
      PhotonHits_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhotonHits),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonHits, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotonHits, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_photonHit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Photon_descriptor_, &Photon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotonHits_descriptor_, &PhotonHits::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_photonHit_2eproto() {
  delete Photon::default_instance_;
  delete Photon_reflection_;
  delete PhotonHits::default_instance_;
  delete PhotonHits_reflection_;
}

void protobuf_AddDesc_photonHit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017photonHit.proto\022\nhitPhotons\"\306\002\n\006Photon"
    "\022\r\n\005PMTID\030\001 \001(\005\022\014\n\004Time\030\002 \001(\001\022\025\n\rKinetic"
    "Energy\030\003 \001(\001\022\014\n\004posX\030\004 \001(\001\022\014\n\004posY\030\005 \001(\001"
    "\022\014\n\004posZ\030\006 \001(\001\022\014\n\004momX\030\007 \001(\001\022\014\n\004momY\030\010 \001"
    "(\001\022\014\n\004momZ\030\t \001(\001\022\014\n\004polX\030\n \001(\001\022\014\n\004polY\030\013"
    " \001(\001\022\014\n\004polZ\030\014 \001(\001\022\017\n\007trackID\030\016 \001(\005\022-\n\006o"
    "rigin\030\017 \001(\0162\035.hitPhotons.Photon.OriginFl"
    "ag\"J\n\nOriginFlag\022\r\n\tCHERENKOV\020\000\022\021\n\rSCINT"
    "ILLATION\020\001\022\016\n\nREEMISSION\020\002\022\n\n\006CHROMA\020\003\"\?"
    "\n\nPhotonHits\022\r\n\005count\030\001 \001(\005\022\"\n\006photon\030\002 "
    "\003(\0132\022.hitPhotons.Photonb\006proto3", 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "photonHit.proto", &protobuf_RegisterTypes);
  Photon::default_instance_ = new Photon();
  PhotonHits::default_instance_ = new PhotonHits();
  Photon::default_instance_->InitAsDefaultInstance();
  PhotonHits::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_photonHit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_photonHit_2eproto {
  StaticDescriptorInitializer_photonHit_2eproto() {
    protobuf_AddDesc_photonHit_2eproto();
  }
} static_descriptor_initializer_photonHit_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Photon_OriginFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photon_OriginFlag_descriptor_;
}
bool Photon_OriginFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Photon_OriginFlag Photon::CHERENKOV;
const Photon_OriginFlag Photon::SCINTILLATION;
const Photon_OriginFlag Photon::REEMISSION;
const Photon_OriginFlag Photon::CHROMA;
const Photon_OriginFlag Photon::OriginFlag_MIN;
const Photon_OriginFlag Photon::OriginFlag_MAX;
const int Photon::OriginFlag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Photon::kPMTIDFieldNumber;
const int Photon::kTimeFieldNumber;
const int Photon::kKineticEnergyFieldNumber;
const int Photon::kPosXFieldNumber;
const int Photon::kPosYFieldNumber;
const int Photon::kPosZFieldNumber;
const int Photon::kMomXFieldNumber;
const int Photon::kMomYFieldNumber;
const int Photon::kMomZFieldNumber;
const int Photon::kPolXFieldNumber;
const int Photon::kPolYFieldNumber;
const int Photon::kPolZFieldNumber;
const int Photon::kTrackIDFieldNumber;
const int Photon::kOriginFieldNumber;
#endif  // !_MSC_VER

Photon::Photon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hitPhotons.Photon)
}

void Photon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Photon::Photon(const Photon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hitPhotons.Photon)
}

void Photon::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pmtid_ = 0;
  time_ = 0;
  kineticenergy_ = 0;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  momx_ = 0;
  momy_ = 0;
  momz_ = 0;
  polx_ = 0;
  poly_ = 0;
  polz_ = 0;
  trackid_ = 0;
  origin_ = 0;
}

Photon::~Photon() {
  // @@protoc_insertion_point(destructor:hitPhotons.Photon)
  SharedDtor();
}

void Photon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Photon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photon_descriptor_;
}

const Photon& Photon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photonHit_2eproto();
  return *default_instance_;
}

Photon* Photon::default_instance_ = NULL;

Photon* Photon::New(::google::protobuf::Arena* arena) const {
  Photon* n = new Photon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photon::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Photon*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, pmtid_);
  momy_ = 0;
  ZR_(momz_, origin_);
  trackid_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Photon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hitPhotons.Photon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PMTID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pmtid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Time;
        break;
      }

      // optional double Time = 2;
      case 2: {
        if (tag == 17) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_KineticEnergy;
        break;
      }

      // optional double KineticEnergy = 3;
      case 3: {
        if (tag == 25) {
         parse_KineticEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kineticenergy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_posX;
        break;
      }

      // optional double posX = 4;
      case 4: {
        if (tag == 33) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_posY;
        break;
      }

      // optional double posY = 5;
      case 5: {
        if (tag == 41) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_posZ;
        break;
      }

      // optional double posZ = 6;
      case 6: {
        if (tag == 49) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_momX;
        break;
      }

      // optional double momX = 7;
      case 7: {
        if (tag == 57) {
         parse_momX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_momY;
        break;
      }

      // optional double momY = 8;
      case 8: {
        if (tag == 65) {
         parse_momY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_momZ;
        break;
      }

      // optional double momZ = 9;
      case 9: {
        if (tag == 73) {
         parse_momZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_polX;
        break;
      }

      // optional double polX = 10;
      case 10: {
        if (tag == 81) {
         parse_polX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &polx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_polY;
        break;
      }

      // optional double polY = 11;
      case 11: {
        if (tag == 89) {
         parse_polY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poly_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_polZ;
        break;
      }

      // optional double polZ = 12;
      case 12: {
        if (tag == 97) {
         parse_polZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &polz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_trackID;
        break;
      }

      // optional int32 trackID = 14;
      case 14: {
        if (tag == 112) {
         parse_trackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_origin;
        break;
      }

      // optional .hitPhotons.Photon.OriginFlag origin = 15;
      case 15: {
        if (tag == 120) {
         parse_origin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_origin(static_cast< ::hitPhotons::Photon_OriginFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hitPhotons.Photon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hitPhotons.Photon)
  return false;
#undef DO_
}

void Photon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hitPhotons.Photon)
  // optional int32 PMTID = 1;
  if (this->pmtid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pmtid(), output);
  }

  // optional double Time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // optional double KineticEnergy = 3;
  if (this->kineticenergy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kineticenergy(), output);
  }

  // optional double posX = 4;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->posx(), output);
  }

  // optional double posY = 5;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->posy(), output);
  }

  // optional double posZ = 6;
  if (this->posz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->posz(), output);
  }

  // optional double momX = 7;
  if (this->momx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->momx(), output);
  }

  // optional double momY = 8;
  if (this->momy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->momy(), output);
  }

  // optional double momZ = 9;
  if (this->momz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->momz(), output);
  }

  // optional double polX = 10;
  if (this->polx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->polx(), output);
  }

  // optional double polY = 11;
  if (this->poly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->poly(), output);
  }

  // optional double polZ = 12;
  if (this->polz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->polz(), output);
  }

  // optional int32 trackID = 14;
  if (this->trackid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->trackid(), output);
  }

  // optional .hitPhotons.Photon.OriginFlag origin = 15;
  if (this->origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->origin(), output);
  }

  // @@protoc_insertion_point(serialize_end:hitPhotons.Photon)
}

::google::protobuf::uint8* Photon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hitPhotons.Photon)
  // optional int32 PMTID = 1;
  if (this->pmtid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pmtid(), target);
  }

  // optional double Time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // optional double KineticEnergy = 3;
  if (this->kineticenergy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kineticenergy(), target);
  }

  // optional double posX = 4;
  if (this->posx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->posx(), target);
  }

  // optional double posY = 5;
  if (this->posy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->posy(), target);
  }

  // optional double posZ = 6;
  if (this->posz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->posz(), target);
  }

  // optional double momX = 7;
  if (this->momx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->momx(), target);
  }

  // optional double momY = 8;
  if (this->momy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->momy(), target);
  }

  // optional double momZ = 9;
  if (this->momz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->momz(), target);
  }

  // optional double polX = 10;
  if (this->polx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->polx(), target);
  }

  // optional double polY = 11;
  if (this->poly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->poly(), target);
  }

  // optional double polZ = 12;
  if (this->polz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->polz(), target);
  }

  // optional int32 trackID = 14;
  if (this->trackid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->trackid(), target);
  }

  // optional .hitPhotons.Photon.OriginFlag origin = 15;
  if (this->origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->origin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hitPhotons.Photon)
  return target;
}

int Photon::ByteSize() const {
  int total_size = 0;

  // optional int32 PMTID = 1;
  if (this->pmtid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pmtid());
  }

  // optional double Time = 2;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // optional double KineticEnergy = 3;
  if (this->kineticenergy() != 0) {
    total_size += 1 + 8;
  }

  // optional double posX = 4;
  if (this->posx() != 0) {
    total_size += 1 + 8;
  }

  // optional double posY = 5;
  if (this->posy() != 0) {
    total_size += 1 + 8;
  }

  // optional double posZ = 6;
  if (this->posz() != 0) {
    total_size += 1 + 8;
  }

  // optional double momX = 7;
  if (this->momx() != 0) {
    total_size += 1 + 8;
  }

  // optional double momY = 8;
  if (this->momy() != 0) {
    total_size += 1 + 8;
  }

  // optional double momZ = 9;
  if (this->momz() != 0) {
    total_size += 1 + 8;
  }

  // optional double polX = 10;
  if (this->polx() != 0) {
    total_size += 1 + 8;
  }

  // optional double polY = 11;
  if (this->poly() != 0) {
    total_size += 1 + 8;
  }

  // optional double polZ = 12;
  if (this->polz() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 trackID = 14;
  if (this->trackid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trackid());
  }

  // optional .hitPhotons.Photon.OriginFlag origin = 15;
  if (this->origin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photon::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Photon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Photon>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Photon::MergeFrom(const Photon& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.pmtid() != 0) {
    set_pmtid(from.pmtid());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.kineticenergy() != 0) {
    set_kineticenergy(from.kineticenergy());
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.posz() != 0) {
    set_posz(from.posz());
  }
  if (from.momx() != 0) {
    set_momx(from.momx());
  }
  if (from.momy() != 0) {
    set_momy(from.momy());
  }
  if (from.momz() != 0) {
    set_momz(from.momz());
  }
  if (from.polx() != 0) {
    set_polx(from.polx());
  }
  if (from.poly() != 0) {
    set_poly(from.poly());
  }
  if (from.polz() != 0) {
    set_polz(from.polz());
  }
  if (from.trackid() != 0) {
    set_trackid(from.trackid());
  }
  if (from.origin() != 0) {
    set_origin(from.origin());
  }
}

void Photon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photon::CopyFrom(const Photon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photon::IsInitialized() const {

  return true;
}

void Photon::Swap(Photon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photon::InternalSwap(Photon* other) {
  std::swap(pmtid_, other->pmtid_);
  std::swap(time_, other->time_);
  std::swap(kineticenergy_, other->kineticenergy_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(posz_, other->posz_);
  std::swap(momx_, other->momx_);
  std::swap(momy_, other->momy_);
  std::swap(momz_, other->momz_);
  std::swap(polx_, other->polx_);
  std::swap(poly_, other->poly_);
  std::swap(polz_, other->polz_);
  std::swap(trackid_, other->trackid_);
  std::swap(origin_, other->origin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Photon_descriptor_;
  metadata.reflection = Photon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photon

// optional int32 PMTID = 1;
void Photon::clear_pmtid() {
  pmtid_ = 0;
}
 ::google::protobuf::int32 Photon::pmtid() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.PMTID)
  return pmtid_;
}
 void Photon::set_pmtid(::google::protobuf::int32 value) {
  
  pmtid_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.PMTID)
}

// optional double Time = 2;
void Photon::clear_time() {
  time_ = 0;
}
 double Photon::time() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.Time)
  return time_;
}
 void Photon::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.Time)
}

// optional double KineticEnergy = 3;
void Photon::clear_kineticenergy() {
  kineticenergy_ = 0;
}
 double Photon::kineticenergy() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.KineticEnergy)
  return kineticenergy_;
}
 void Photon::set_kineticenergy(double value) {
  
  kineticenergy_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.KineticEnergy)
}

// optional double posX = 4;
void Photon::clear_posx() {
  posx_ = 0;
}
 double Photon::posx() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.posX)
  return posx_;
}
 void Photon::set_posx(double value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.posX)
}

// optional double posY = 5;
void Photon::clear_posy() {
  posy_ = 0;
}
 double Photon::posy() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.posY)
  return posy_;
}
 void Photon::set_posy(double value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.posY)
}

// optional double posZ = 6;
void Photon::clear_posz() {
  posz_ = 0;
}
 double Photon::posz() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.posZ)
  return posz_;
}
 void Photon::set_posz(double value) {
  
  posz_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.posZ)
}

// optional double momX = 7;
void Photon::clear_momx() {
  momx_ = 0;
}
 double Photon::momx() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.momX)
  return momx_;
}
 void Photon::set_momx(double value) {
  
  momx_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.momX)
}

// optional double momY = 8;
void Photon::clear_momy() {
  momy_ = 0;
}
 double Photon::momy() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.momY)
  return momy_;
}
 void Photon::set_momy(double value) {
  
  momy_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.momY)
}

// optional double momZ = 9;
void Photon::clear_momz() {
  momz_ = 0;
}
 double Photon::momz() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.momZ)
  return momz_;
}
 void Photon::set_momz(double value) {
  
  momz_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.momZ)
}

// optional double polX = 10;
void Photon::clear_polx() {
  polx_ = 0;
}
 double Photon::polx() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.polX)
  return polx_;
}
 void Photon::set_polx(double value) {
  
  polx_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.polX)
}

// optional double polY = 11;
void Photon::clear_poly() {
  poly_ = 0;
}
 double Photon::poly() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.polY)
  return poly_;
}
 void Photon::set_poly(double value) {
  
  poly_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.polY)
}

// optional double polZ = 12;
void Photon::clear_polz() {
  polz_ = 0;
}
 double Photon::polz() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.polZ)
  return polz_;
}
 void Photon::set_polz(double value) {
  
  polz_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.polZ)
}

// optional int32 trackID = 14;
void Photon::clear_trackid() {
  trackid_ = 0;
}
 ::google::protobuf::int32 Photon::trackid() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.trackID)
  return trackid_;
}
 void Photon::set_trackid(::google::protobuf::int32 value) {
  
  trackid_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.trackID)
}

// optional .hitPhotons.Photon.OriginFlag origin = 15;
void Photon::clear_origin() {
  origin_ = 0;
}
 ::hitPhotons::Photon_OriginFlag Photon::origin() const {
  // @@protoc_insertion_point(field_get:hitPhotons.Photon.origin)
  return static_cast< ::hitPhotons::Photon_OriginFlag >(origin_);
}
 void Photon::set_origin(::hitPhotons::Photon_OriginFlag value) {
  
  origin_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.Photon.origin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PhotonHits::kCountFieldNumber;
const int PhotonHits::kPhotonFieldNumber;
#endif  // !_MSC_VER

PhotonHits::PhotonHits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hitPhotons.PhotonHits)
}

void PhotonHits::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PhotonHits::PhotonHits(const PhotonHits& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hitPhotons.PhotonHits)
}

void PhotonHits::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = 0;
}

PhotonHits::~PhotonHits() {
  // @@protoc_insertion_point(destructor:hitPhotons.PhotonHits)
  SharedDtor();
}

void PhotonHits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotonHits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotonHits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotonHits_descriptor_;
}

const PhotonHits& PhotonHits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photonHit_2eproto();
  return *default_instance_;
}

PhotonHits* PhotonHits::default_instance_ = NULL;

PhotonHits* PhotonHits::New(::google::protobuf::Arena* arena) const {
  PhotonHits* n = new PhotonHits;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotonHits::Clear() {
  count_ = 0;
  photon_.Clear();
}

bool PhotonHits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hitPhotons.PhotonHits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photon;
        break;
      }

      // repeated .hitPhotons.Photon photon = 2;
      case 2: {
        if (tag == 18) {
         parse_photon:
          DO_(input->IncrementRecursionDepth());
         parse_loop_photon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_photon;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hitPhotons.PhotonHits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hitPhotons.PhotonHits)
  return false;
#undef DO_
}

void PhotonHits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hitPhotons.PhotonHits)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .hitPhotons.Photon photon = 2;
  for (unsigned int i = 0, n = this->photon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->photon(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hitPhotons.PhotonHits)
}

::google::protobuf::uint8* PhotonHits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hitPhotons.PhotonHits)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .hitPhotons.Photon photon = 2;
  for (unsigned int i = 0, n = this->photon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->photon(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hitPhotons.PhotonHits)
  return target;
}

int PhotonHits::ByteSize() const {
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // repeated .hitPhotons.Photon photon = 2;
  total_size += 1 * this->photon_size();
  for (int i = 0; i < this->photon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photon(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotonHits::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotonHits* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotonHits>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotonHits::MergeFrom(const PhotonHits& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  photon_.MergeFrom(from.photon_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void PhotonHits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotonHits::CopyFrom(const PhotonHits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotonHits::IsInitialized() const {

  return true;
}

void PhotonHits::Swap(PhotonHits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotonHits::InternalSwap(PhotonHits* other) {
  std::swap(count_, other->count_);
  photon_.UnsafeArenaSwap(&other->photon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotonHits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotonHits_descriptor_;
  metadata.reflection = PhotonHits_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotonHits

// optional int32 count = 1;
void PhotonHits::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 PhotonHits::count() const {
  // @@protoc_insertion_point(field_get:hitPhotons.PhotonHits.count)
  return count_;
}
 void PhotonHits::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:hitPhotons.PhotonHits.count)
}

// repeated .hitPhotons.Photon photon = 2;
int PhotonHits::photon_size() const {
  return photon_.size();
}
void PhotonHits::clear_photon() {
  photon_.Clear();
}
 const ::hitPhotons::Photon& PhotonHits::photon(int index) const {
  // @@protoc_insertion_point(field_get:hitPhotons.PhotonHits.photon)
  return photon_.Get(index);
}
 ::hitPhotons::Photon* PhotonHits::mutable_photon(int index) {
  // @@protoc_insertion_point(field_mutable:hitPhotons.PhotonHits.photon)
  return photon_.Mutable(index);
}
 ::hitPhotons::Photon* PhotonHits::add_photon() {
  // @@protoc_insertion_point(field_add:hitPhotons.PhotonHits.photon)
  return photon_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::hitPhotons::Photon >&
PhotonHits::photon() const {
  // @@protoc_insertion_point(field_list:hitPhotons.PhotonHits.photon)
  return photon_;
}
 ::google::protobuf::RepeatedPtrField< ::hitPhotons::Photon >*
PhotonHits::mutable_photon() {
  // @@protoc_insertion_point(field_mutable_list:hitPhotons.PhotonHits.photon)
  return &photon_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hitPhotons

// @@protoc_insertion_point(global_scope)
